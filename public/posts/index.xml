<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on marinegor.dev</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on marinegor.dev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Egor Marin</copyright>
    <lastBuildDate>Wed, 27 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MDAnalysis UGM 2023: MDAnalysis Parallelization @ GSOC</title>
      <link>http://localhost:1313/posts/gsoc-2023/mda_ugm_2023/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/mda_ugm_2023/</guid>
      <description>Parallelization of MDAnalysis Egor Marin, Google Summer of Code contributor&#xA;marinegor@fastmail.com&#xA;Motivation T(insight) = T(simulation) + T(analysis) pmda: 30‚≠êÔ∏è, 21üç¥ (forks) all MDAnalysis instances are parallelizable (courtesy @yuxuanzhuang) Goals Change AnalysisBase in a way that&amp;hellip;&#xA;Introduces multiple job support local &amp;ndash; using multiprocessing? non-local &amp;ndash; using dask? Does not break existing code (subclasses, dependencies, etc) Allows customization add your own execution backend write your own parallelizable classes Sneak peak: results &amp;gt;&amp;gt;&amp;gt; from MDAnalysis.</description>
    </item>
    <item>
      <title>GSOC-2023: summary</title>
      <link>http://localhost:1313/posts/gsoc-2023/summary/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/summary/</guid>
      <description>As you might know from my previous posts, during the summer of 2023 I&amp;rsquo;ve been working on MDAnalysis&amp;rsquo;s project during Google Summer of Code. Here I&amp;rsquo;ll summarize what I&amp;rsquo;ve done, how others can use it, and what changes will follow that in the MDAnalysis codebase in the near future.&#xA;A short description of the goals of the project. One sentence: introduce parallel execution of analysis runs in MDAnalysis library. Somewhat good introduction I also gave here when writing a proposal for the project.</description>
    </item>
    <item>
      <title>(again bi)weekly GSOC-4: finally about results aggretation</title>
      <link>http://localhost:1313/posts/gsoc-2023/biweekly-4_results_aggregation/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/biweekly-4_results_aggregation/</guid>
      <description>In the last blogpost, I explained how I decided to lift the parallelization class up, and how AnalysisBase.run() method changed after introducing this.&#xA;Here, I will (finally) talk about aggregating results from different worker objects, and how to make the implementation more explicit while not making people who create subclasses write a lot of boilerplate code.&#xA;What are we trying to do? We&amp;rsquo;re not looking on how to aggregate results from independent AnalysisBase.</description>
    </item>
    <item>
      <title>(not anymore bi)weekly GSOC-3: writing `ParallelExecutor` class</title>
      <link>http://localhost:1313/posts/gsoc-2023/biweekly-3_parallel_executor/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/biweekly-3_parallel_executor/</guid>
      <description>In the previous blogpost, I briefly explained how decomposition works &amp;ndash; we split all _single_frame() runs into independent groups that get executed in parallel. For this, we have _compute method that executes the frames group, and run method that orchestrates the _compute execution.&#xA;Here, I will explain how the actual implementation went south, and then evolved into something more complex and simple at the same time.&#xA;What was the problem? So, the actual implementation of the run protocol turned out to be more complicated than I thought.</description>
    </item>
    <item>
      <title>Biweekly GSOC-2: splitting the work and writing `_setup_bslices`</title>
      <link>http://localhost:1313/posts/gsoc-2023/biweekly-2_splitting/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/biweekly-2_splitting/</guid>
      <description>In the previous blogpost, I briefly explained how I&amp;rsquo;m planning to decompose the AnalysisBase.run() method, so that its subclasses won&amp;rsquo;t notice the changes in the protocol, but at the same time will be able to perform computations in a parallel manner.&#xA;Here I&amp;rsquo;ll go through the implementation details of some methods &amp;ndash; namely, I&amp;rsquo;ll explain how I went to a certain implementation of _setup_bslices, _compute and run.&#xA;Where are we right now?</description>
    </item>
    <item>
      <title>Biweekly GSOC-1: decomposing `AnalysisBase.run()`</title>
      <link>http://localhost:1313/posts/gsoc-2023/biweekly-1_decomposing/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/biweekly-1_decomposing/</guid>
      <description>In the first GSOC-devoted blogpost I explained the idea behind my proposal and the approximate timeline for its execution.&#xA;Here I&amp;rsquo;ll go through the initial implementation stages &amp;ndash; how I decided to decompose the run() method for the AnalysisBase so that I could paralellize the execution, which changes it&amp;rsquo;ll require, and how not to break all the existing code in the process. Let&amp;rsquo;s go!&#xA;AnalysisBase protocol AnalysisBase is a superclass for most of the MDAnalysis objects that perform the actual analysis of trajectories.</description>
    </item>
    <item>
      <title>GSOC 2023: what will I do?</title>
      <link>http://localhost:1313/posts/gsoc-2023/gsoc-proposal/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gsoc-2023/gsoc-proposal/</guid>
      <description>This year I applied for the Google Summer of Code program, and luckily was selected as a contributor for MDAnalysis with my proposal for a parallel analysis project, extending the idea suggested by the developers.&#xA;In this post, I&amp;rsquo;ll briefly describe the proposal itself &amp;ndash; motivation, technical outline, and how I expect things will change for the MDAnalysis users after the successful execution of the proposal idea.&#xA;Overview and motivation As you might already know, MDAnalysis is a python library for analysis molecular dynamics (MD) trajectories, which is kinda clear from the start if you look at the library&amp;rsquo;s name.</description>
    </item>
  </channel>
</rss>
